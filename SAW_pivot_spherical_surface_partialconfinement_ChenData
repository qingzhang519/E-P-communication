# -*- coding: utf-8 -*-
"""
# This is the python code to simulate a SAW chain partially confined on the surface of a sphere using the pivot algorithm.
The parameters for the data of Chen et al. (2018, Nat. Genet.) were used.
"""
import numpy as np
import matplotlib.pyplot as plt
import time
import math

# Simulation parameters
r = 1
R = 10000  # Spherical radius [20, 40, 100, 10000]
N_run = int(2e+5)  

# for figure 6
N_step = 397 
Walk = np.zeros((N_step, 3, N_run),dtype=np.float64)
gc = 12.5  # See figure 9 (b)
nu = 0.68  # Based on log(d_EP)/log(CL_EP)
g = round((0.75 - nu) * gc / (nu - 0.6))
n_part = int(np.floor(N_step / g))

n_step = int(np.floor((N_step - 1) / n_part) + 1)  # n_step = g + 1
I_ss = np.array([(i * (n_step - 1) + 1) for i in range(n_part + 1)]) # note that I_ss starts from 1

print(I_ss)

repeat = 1
np.random.seed(repeat)  
# Initialization
Initiation_success = 0
Ini_p = 0
#
while Initiation_success < 2:
    theta = np.arcsin(r / (2 * R)) * 2  # r: jump length

    Walk[0, 2, 0] = R
    Walk[1, 0, 0] = R * np.sin(theta)
    Walk[1, 2, 0] = R * np.cos(theta)

    rr = np.random.rand(int(N_step * 1e+5))
    Phi0 = rr * 2 * np.pi
    p = 0
    s = 2  # note that s starts from 1

    while s <= N_step:
        #A1 = Walk[s-1, :, 0]
        A1 = Walk[s-2, :, 0]
        phi1 = np.arctan2(A1[1], A1[0])  #  note that arctan2 in [-pi, pi)

        theta1 = np.arccos(A1[2] / R)
        
        Ry_theta1 = np.array([[np.cos(theta1), 0, np.sin(theta1)],
                              [0, 1, 0],
                              [-np.sin(theta1), 0, np.cos(theta1)]])
        
        Rz_phi1 = np.array([[np.cos(phi1), -np.sin(phi1), 0],
                            [np.sin(phi1), np.cos(phi1), 0],
                            [0, 0, 1]])

        flag = 1
        while flag > 0:
            p += 1
            phi = Phi0[p]
            Rz_phi = np.array([[np.cos(phi), -np.sin(phi), 0],
                               [np.sin(phi), np.cos(phi), 0],
                               [0, 0, 1]])

            Xd = R * np.array([np.sin(theta) * np.cos(phi), 
                               np.sin(theta) * np.sin(phi), 
                               np.cos(theta)])

            Xd2 = np.dot(Xd, np.dot(Ry_theta1.T, Rz_phi1.T))
            
            if np.min(np.sum((Walk[:s-1, :, 0] - Xd2)**2, axis=1)) >= r**2:
                flag = 0
                # Walk[s, :, 0] = Xd2
                Walk[s-1, :, 0] = Xd2
                s += 1
            else:
                flag += 1
                if flag > 5:
                    flag = 0
                    s -= 1

    # Test for self-avoiding condition
    Dis = 1000
    for i in range(N_step):
        for j in range(i+1, N_step):
            d = np.sqrt(np.sum((Walk[i, :, 0] - Walk[j, :, 0])**2))
            if d < Dis:
                Dis = d
    Initiation_success = 0
    if Dis >= 1 - 1e-10:
        Initiation_success += 1

    if np.max(np.abs(np.sqrt(np.sum(Walk[I_ss-1, :, 0]**2, axis=1)) - R) / R) < 1e-10:
        Initiation_success += 1

    Ini_p += 1
    if Ini_p % 2 == 0:
        print(Ini_p)

    if Ini_p > 1000:
        break

if Ini_p <= 1000:
    print("The initial conformation is self-avoiding!!!")
    print("All the beads are on the spherical surface!!!")

     
# Visualization
i0 = 0  
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the walk
ax.plot(Walk[:, 0, i0], Walk[:, 1, i0], Walk[:, 2, i0], '.-', markersize=15)
ax.plot(Walk[I_ss-1, 0, i0], Walk[I_ss-1, 1, i0], Walk[I_ss-1, 2, i0], 'or', markersize=8, linewidth=3)

# Plot the sphere
u, v = np.mgrid[0:2 * np.pi:100j, 0:np.pi:50j]
x = R * np.cos(u) * np.sin(v)
y = R * np.sin(u) * np.sin(v)
z = R * np.cos(v)
ax.plot_surface(x, y, z, color='b', alpha=0.3, rstride=1, cstride=1)

# Axis labels
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')

# Set axis limits
xL = np.min(Walk[:, 0, i0])
xR = np.max(Walk[:, 0, i0])
yL = np.min(Walk[:, 1, i0])
yR = np.max(Walk[:, 1, i0])
zL = np.min(Walk[:, 2, i0])
zR = np.max(Walk[:, 2, i0])
ax.set_xlim([xL - 10, xR + 10])
ax.set_ylim([yL - 10, yR + 10])
ax.set_zlim([zL - 10, zR + 10])

# Show grid
ax.grid(True)

plt.show()
###
# Time the "for" loop
start_time = time.time()
# formal walks
Phi = np.random.rand(N_run) * 2 * np.pi
S = np.floor(N_step * np.random.rand(N_run)).astype(int) + 1  # start from 1
LR = np.random.rand(N_run) * 2

for i in range(1,N_run):#  range(1, N_run):
    s = S[i] # start from 1
    Walk[:, :, i] = Walk[:, :, i-1].copy()
    phi = Phi[i]
    
    if LR[i] < 1:  # Rotate around the line connecting origin and selected point
        if s==1 or s==N_step:
            continue
        elif s <= np.floor(N_step/2).astype(int):
            Xd = Walk[:s-1, :, i-1]  # Points to rotate
            walk0 = np.array([0, 0, 0],dtype=np.float64)  # Origin
            A1 = Walk[s-1, :, i-1]  # Rotation axis (center)
            I = np.arange(1, s)
        else:
            Xd = Walk[s:, :, i-1]  # Points to rotate
            walk0 = np.array([0, 0, 0],dtype=np.float64)  # Origin
            A1 = Walk[s-1, :, i-1] - walk0  # Rotation axis
            I = np.arange(s+1, N_step+1)
            
        r1 = np.sqrt(np.sum(A1**2))

        phi1 = np.arctan2(A1[1],A1[0])            
        theta1 = np.arccos(A1[2]/r1)
        
        Ry_theta1 = np.array([
            [np.cos(theta1), 0, np.sin(theta1)],
            [0, 1, 0],
            [-np.sin(theta1), 0, np.cos(theta1)]
        ])
        
        Rz_phi1 = np.array([
            [np.cos(phi1), -np.sin(phi1), 0],
            [np.sin(phi1), np.cos(phi1), 0],
            [0, 0, 1]
        ])
        
        Rz_phi = np.array([
            [np.cos(phi), -np.sin(phi), 0],
            [np.sin(phi), np.cos(phi), 0],
            [0, 0, 1]
        ])
        
        Xd2 = Xd @ Rz_phi1 @ Ry_theta1 @ Rz_phi @ Ry_theta1.T @ Rz_phi1.T + walk0
        
        flag = True
        J = np.setdiff1d(np.arange(1, N_step+1), I)
        for j in J:
            if np.min(np.sum((Walk[j-1, :, i] - Xd2)**2, axis=1)) < r**2:
                flag = False
                break
                
        if flag:
            Walk[I-1, :, i] = Xd2
            
    else:  # Pull or push beads between two adjacent confined beads
        if s == N_step:
            continue
            
        i0 = np.floor((s-1)/(n_step-1)).astype(int) + 1
        i_left = I_ss[i0-1]  # Left confined point
        i_right = I_ss[i0]  # Right confined point
        
        # First rotation
        walk0 = Walk[s-1, :, i-1]  # Relative origin
        B0 = np.array([0, 0, 0],dtype=np.float64)  # Origin
        A0 = Walk[s-1, :, i-1]
        C0 = Walk[i_right-1, :, i-1]
        A = A0 - walk0
        B = B0 - walk0
        C = C0 - walk0
        D = np.array([1, 0, 0],dtype=np.float64)
        
        D_23 = -np.linalg.inv(np.vstack([B[1:3], C[1:3]])) @ np.array([B[0], C[0]])
        D[1:3] = D_23.T
        X_right = Walk[i_right-1, :, i-1]
        
        Xd = Walk[s-1:i_right, :, i-1] - walk0  # Beads to rotate
        A1 = D  # Rotation axis
        I = np.arange(s, i_right+1)
        
        r1 = np.sqrt(np.sum(A1**2))
        phi1 = np.arctan2(A1[1],A1[0])
            
        theta1 = np.arccos(A1[2]/r1)
        
        Ry_theta1 = np.array([
            [np.cos(theta1), 0, np.sin(theta1)],
            [0, 1, 0],
            [-np.sin(theta1), 0, np.cos(theta1)]
        ])
        
        Rz_phi1 = np.array([
            [np.cos(phi1), -np.sin(phi1), 0],
            [np.sin(phi1), np.cos(phi1), 0],
            [0, 0, 1]
        ])
        
        Rz_phi = np.array([
            [np.cos(phi), -np.sin(phi), 0],
            [np.sin(phi), np.cos(phi), 0],
            [0, 0, 1]
        ])
        
        Xd2 = Xd @ Rz_phi1 @ Ry_theta1 @ Rz_phi @ Ry_theta1.T @ Rz_phi1.T + walk0
        
        flag = True
        J = np.arange(i_left, s)
        for j in J:
            if np.min(np.sum((Walk[j-1, :, i] - Xd2)**2, axis=1)) < r**2:
                flag = False
                break
                
        if flag:
            Walk[I-1, :, i] = Xd2
                             
        # Second rotation
        walk0 = Walk[i_left-1, :, i-1]  # Relative origin
        A0 = walk0
        B0 = np.array([0, 0, 0],dtype=np.float64)
        C0 = Walk[i_right-1, :, i]  # Changed right confined site
        
        if abs(np.sqrt(np.sum(C0**2)) - R)/R < 1e-9: # if the moved right end leaves a distance from the spherical surface   
            Walk[I-1, :, i] = Walk[I-1, :, i-1]
            continue
            
        A = A0 - walk0
        B = B0 - walk0
        C = C0 - walk0
        D = np.array([1, 0, 0],dtype=np.float64)
        D_23 = -np.linalg.inv(np.vstack([B[1:3], C[1:3]])) @ np.array([B[0], C[0]])
        D[1:3] = D_23.T
        
        A1 = D  # Rotation axis
        Xd = Walk[i_left-1:i_right, :, i] - walk0  # Beads to rotate
        I = np.arange(i_left, i_right+1)
        L = np.sqrt(np.sum((Walk[i_right-1, :, i] - Walk[i_left-1, :, i])**2))
        phi_1 = np.arccos(L/2/R)
        phi_2 = np.arccos(np.dot(C-A, B-A)/np.linalg.norm(C-A)/np.linalg.norm(B-A))
        phi = phi_2 - phi_1
                
            
        r1 = np.sqrt(np.sum(A1**2))                       
        phi1 = np.arctan2(A1[1],A1[0])           
        theta1 = np.arccos(A1[2]/r1)
                   
        Ry_theta1 = np.array([
            [np.cos(theta1), 0, np.sin(theta1)],
            [0, 1, 0],
            [-np.sin(theta1), 0, np.cos(theta1)]
        ])
        
        Rz_phi1 = np.array([
            [np.cos(phi1), -np.sin(phi1), 0],
            [np.sin(phi1), np.cos(phi1), 0],
            [0, 0, 1]
        ])
        
        Rz_phi = np.array([
            [np.cos(phi), -np.sin(phi), 0],
            [np.sin(phi), np.cos(phi), 0],
            [0, 0, 1]
        ])
        
        Xd2 = Xd @ Rz_phi1 @ Ry_theta1 @ Rz_phi @ Ry_theta1.T @ Rz_phi1.T + walk0
        
        if abs(np.sqrt(np.sum(Xd2[-1, :]**2)) - R)/R > 1e-9:    
            Xd2_2 = Xd @ Rz_phi1 @ Ry_theta1 @ Rz_phi.T @ Ry_theta1.T @ Rz_phi1.T + walk0
            if abs(np.linalg.norm(Xd2_2[-1, :]) - R) < abs(np.linalg.norm(Xd2[-1, :]) - R):
                Xd2 = Xd2_2
            else:
                Walk[s-1:i_right, :, i]= Walk[s-1:i_right, :, i-1]
                continue
                
        flag = True
        J = np.arange(1, i_left)
        for j in J:
            if np.min(np.sum((Walk[j-1, :, i] - Xd2)**2, axis=1)) < r**2:
                flag = False
                # Walk[s:i_right, :, i] = Walk[s:i_right, :, i-1]
                Walk[s-1:i_right, :, i] = Walk[s-1:i_right, :, i-1]  
                # In theory, Walk[s-1, :, i] should remain unchanged; however, numerical precision in the simulation may introduce minor variations.  
                break
                
        if flag:
            Walk[I-1, :, i] = Xd2
                              
        # Third rotation
        if i_right == N_step:
            continue
            
        walk0 = np.array([0, 0, 0],dtype=np.float64)  # Relative origin
        A0 = walk0
        B0 = Walk[i_right-1, :, i]  # Moved right confined bead
        C0 = X_right  # Original right confined bead
        
        A = A0 - walk0
        B = B0 - walk0
        C = C0 - walk0
        
        ####
        # Once the right end is back in its original position, no further adjustment is needed.
        if np.linalg.norm(B-C) < 1e-4:
            I = np.arange(i_right+1, N_step+1)
            Xd = Walk[i_right:, :, i] - walk0  # Beads to rotate
            flag = True
            J = np.arange(i_left, i_right+1)
            for j in J:
                if np.min(np.sum((Walk[j-1, :, i] - Xd)**2, axis=1)) < r**2:
                    flag = False
                    Walk[i_left-1:i_right, :, i] = Walk[i_left-1:i_right, :, i-1]
                    break
            continue
        ####   
        D = np.array([1, 0, 0],dtype=np.float64)
        D_23 = -np.linalg.inv(np.vstack([B[1:3], C[1:3]])) @ np.array([B[0], C[0]])
        D[1:3] = D_23.T
        
        A1 = D  # Rotation axis
        Xd = Walk[i_right:, :, i] - walk0  # Beads to rotate
                               
        I = np.arange(i_right+1, N_step+1)
        
        x_arccos=np.dot(B-A, C-A)/R**2
        x_arccos=np.clip(x_arccos,-1,1)  # confined to [-1, 1]        
        phi = np.arccos(x_arccos)
        
        r1 = np.sqrt(np.sum(A1**2))
        phi1 = np.arctan2(A1[1],A1[0])
            
        theta1 = np.arccos(A1[2]/r1)
            
        Ry_theta1 = np.array([
            [np.cos(theta1), 0, np.sin(theta1)],
            [0, 1, 0],
            [-np.sin(theta1), 0, np.cos(theta1)]
        ],dtype=np.float64)
        
        Rz_phi1 = np.array([
            [np.cos(phi1), -np.sin(phi1), 0],
            [np.sin(phi1), np.cos(phi1), 0],
            [0, 0, 1]
        ],dtype=np.float64)
        
        Rz_phi = np.array([
            [np.cos(phi), -np.sin(phi), 0],
            [np.sin(phi), np.cos(phi), 0],
            [0, 0, 1]
        ],dtype=np.float64)
        
        Xd2 = Xd @ Rz_phi1 @ Ry_theta1 @ Rz_phi @ Ry_theta1.T @ Rz_phi1.T + walk0
        

        # if np.sqrt(np.sum((Xd2[0, :] - Walk[i_right-1, :, i])**2)) > r + 1e-5:
        if np.sqrt(np.sum((Xd2[0, :] - Walk[i_right-1, :, i])**2)) > r + 1e-9:    
            Xd2_2 = Xd @ Rz_phi1 @ Ry_theta1 @ Rz_phi.T @ Ry_theta1.T @ Rz_phi1.T + walk0
            if np.linalg.norm(Xd2_2[0, :] - Walk[i_right-1, :, i]) < np.linalg.norm(Xd2[0, :] - Walk[i_right-1, :, i]):
                Xd2 = Xd2_2
            else:  
                Walk[i_left-1:i_right, :, i] = Walk[i_left-1:i_right, :, i-1]
                continue
                
        flag = True
        J = np.arange(1, i_right+1)
        for j in J:
            if np.min(np.sum((Walk[j-1, :, i] - Xd2)**2, axis=1)) < r**2:
                flag = False
                Walk[i_left-1:i_right, :, i] = Walk[i_left-1:i_right, :, i-1]
                break
                
        if flag:
            Walk[I-1, :, i] = Xd2            
                
## 
end_time = time.time()    
# Show elapsed time
time_cost=end_time-start_time
print('Random walks have been over!')
print("Elapsed Time:", time_cost)

# test the chain's connectivity
i0= N_run-1
for s in range(N_step-1):
    d=np.sqrt(sum((Walk[s,:,i0]-Walk[s+1,:,i0])**2)) 
    if abs(d-1)>1e-4:
       print('Be cautious with the chain connectivity.')
       print(s)
       print('d='+str(d))
# test if the confined beads are on the sphere's surface  
for s in I_ss:       
    d2=abs(np.sqrt(sum((Walk[s-1,:,i0])**2))-R)/R 
    if d2>1e-9:
        print('Be cautious with the spherical confinement.')
        print(s)
        print('d2='+str(d2))

# Plot the last conformation
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot3D(Walk[:, 0, -1], Walk[:, 1, -1], Walk[:, 2, -1], '.-', markersize=15)
ax.plot3D(Walk[I_ss-1, 0, -1], Walk[I_ss-1, 1, -1], Walk[I_ss-1, 2, -1], 'or', markersize=8, linewidth=3)
# Plot the confining sphere
phi, theta = np.mgrid[0.0:2.0*np.pi:1500j, 0.0:np.pi:1500j]
x = R * np.sin(theta) * np.cos(phi)
y = R * np.sin(theta) * np.sin(phi)
z = R * np.cos(theta)
ax.plot_surface(x, y, z, color='grey', alpha=0.3, shade=False)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.set_xlim([np.min(Walk[:, 0, -1])-R/100, np.max(Walk[:, 0, -1])+R/100])
ax.set_ylim([np.min(Walk[:, 1, -1])-R/100, np.max(Walk[:, 1, -1])+R/100])
ax.set_zlim([np.min(Walk[:, 2, -1])-R/100, np.max(Walk[:, 2, -1])+R/100])

# Plot end position distribution
n = 30
n_bin = 2 * n + 1
End = Walk[-1, :, :] - Walk[0, :, :]
R_max = np.max(np.abs(End))
fig, ax = plt.subplots()
for i in range(3):
    X = End[i, :]
    bins = np.linspace(-R_max, R_max, 21)
    fx, x = np.histogram(X, bins=bins, density=True)
    px = fx / sum(fx) / (bins[1] - bins[0])
    ax.plot(x[:-1], px, marker='o', label=['x', 'y', 'z'][i])
ax.set_xlabel('End Position')
ax.set_ylabel('Probability Density Function')
ax.legend()
plt.show()


Phi1 = []
Theta1 = []
for i in range(End.shape[1]):
    A1 = End[:, i]
    phi1 = math.atan2(A1[1], A1[0])
    if np.sqrt(np.sum(A1**2))==0:
       theta1 =0 
    else:
       theta1 = math.acos(A1[2] / np.sqrt(np.sum(A1**2)))
    Theta1.append(theta1)
    Phi1.append(phi1)
Phi1 = np.array(Phi1)
Theta1 = np.array(Theta1)
Phi1[Phi1 < 0] += 2 * np.pi

# Plot Theta and Phi distributions
fig, ax = plt.subplots(2, 1, figsize=(8, 10))
ax[0].hist(Theta1, bins=np.arange(0, np.pi, 0.1), density=True, alpha=0.7, label=r'$\theta$')
ax[1].hist(Phi1, bins=np.arange(0, 2 * np.pi, 0.01), density=True, alpha=0.7, label=r'$\phi$')
ax[0].set_xlabel(r'$\theta$')
ax[0].set_ylabel('PDF')
ax[1].set_xlabel(r'$\phi$')
ax[1].set_ylabel('PDF')
plt.show()
